// popup.js - Script s√©par√© pour √©viter les erreurs CSP
console.log('üéµ Popup YouTube Music Controller charg√©')

// √âl√©ments DOM
const statusEl = document.getElementById('status')
const testBtn = document.getElementById('testBtn')
const playBtn = document.getElementById('playBtn')
const nextBtn = document.getElementById('nextBtn')

// √âtat de l'extension
let currentStatus = null

// V√©rifier le statut au chargement
async function checkStatus() {
  try {
    // Envoyer message au background script pour r√©cup√©rer le statut
    const response = await chrome.runtime.sendMessage({ action: 'get_status' })
    updateStatusDisplay(response)
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration statut:', error)
    updateStatusDisplay({ connected: false, error: 'Erreur communication' })
  }
}

// Mettre √† jour l'affichage du statut
function updateStatusDisplay(status) {
  currentStatus = status
  
  if (status && status.connected) {
    statusEl.className = 'status connected'
    statusEl.innerHTML = `
      <div><strong>‚úÖ Connect√©</strong></div>
      <div style="margin-top: 4px; font-size: 12px;">
        ${status.title || 'YouTube Music'}<br>
        ${status.artist ? `par ${status.artist}` : ''}
        ${status.isPlaying ? ' ‚ñ∂Ô∏è' : ' ‚è∏Ô∏è'}
      </div>
    `
  } else {
    statusEl.className = 'status disconnected' 
    statusEl.innerHTML = `
      <div><strong>‚ùå D√©connect√©</strong></div>
      <div style="margin-top: 4px; font-size: 12px;">
        ${status?.error || 'YouTube Music non d√©tect√©'}
      </div>
    `
  }
}

// Boutons de test
testBtn.addEventListener('click', async () => {
  console.log('üß™ Test connexion...')
  testBtn.textContent = '...'
  
  try {
    await checkStatus()
    testBtn.textContent = 'Test'
  } catch (error) {
    console.error('‚ùå Test √©chou√©:', error)
    testBtn.textContent = '‚ùå'
    setTimeout(() => {
      testBtn.textContent = 'Test'
    }, 2000)
  }
})

playBtn.addEventListener('click', async () => {
  console.log('üéµ Test Play/Pause')
  playBtn.textContent = '...'
  
  try {
    await chrome.runtime.sendMessage({ action: 'play_pause' })
    setTimeout(() => {
      playBtn.textContent = '‚ñ∂Ô∏è'
    }, 1000)
  } catch (error) {
    console.error('‚ùå Erreur play/pause:', error)
    playBtn.textContent = '‚ùå'
    setTimeout(() => {
      playBtn.textContent = '‚ñ∂Ô∏è'
    }, 2000)
  }
})

nextBtn.addEventListener('click', async () => {
  console.log('‚è≠Ô∏è Test Next Track')
  nextBtn.textContent = '...'
  
  try {
    await chrome.runtime.sendMessage({ action: 'next_track' })
    setTimeout(() => {
      nextBtn.textContent = '‚è≠Ô∏è'
    }, 1000)
  } catch (error) {
    console.error('‚ùå Erreur next track:', error)
    nextBtn.textContent = '‚ùå'
    setTimeout(() => {
      nextBtn.textContent = '‚è≠Ô∏è'
    }, 2000)
  }
})

// √âcouter les mises √† jour du background script
chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
  if (message.type === 'status_update') {
    updateStatusDisplay(message.data)
  }
})

// V√©rifier le statut au chargement
document.addEventListener('DOMContentLoaded', () => {
  checkStatus()
  
  // Mise √† jour p√©riodique
  setInterval(checkStatus, 5000)
})

console.log('‚úÖ Popup script initialis√©')